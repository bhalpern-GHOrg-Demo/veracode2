name: Veracode Build
on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      ref:
        required: true
        type: string
      token:
        required: true
        type: string
      event_name:
        required: true
        type: string
      build_runs_on:
        required: true
        type: string
      build_packager_image:
        required: true
        type: string
      build_predependency_command:
        required: true
        type: string
      ruby_version:
        required: true
        type: string
      bundle_version:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ fromJSON(inputs.build_runs_on) }}
    container:
      image: ${{ inputs.build_packager_image }}
    env:
      VERACODE_API_KEY_ID: '${{ secrets.VERACODE_API_ID }}'
      VERACODE_API_KEY_SECRET: '${{ secrets.VERACODE_API_KEY }}'
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
        token: ${{ inputs.token }}

    - uses: actions/checkout@v4
      with:
        path: 'veracode-helper'


    - name: MacOS Message
      if: ${{ fromJSON(inputs.build_runs_on) == 'macOs-latest' }}
      run: |
        echo "Please ensure that you have signed the provisioning profile of your IOS application with the settings that allow for Archival and exporting on the proper architecture defined in your Schema"
        echo "You may specify the name of the build settings in the srcclr.yml file with the ios_configuration: and ios_scheme: parameters that will then be used with the Veracode Auto-pacakger"
        echo "Installing Gen IR, making sure that xcodebuild tools is installed"
        brew tap veracode/tap
        brew install gen-ir
        if xcodebuild --version ; then echo "XcodeBuild is installed" ; fi
    # make sure to add a conditional step to install xcodebuild tools if they aren't already
        
    # TODO: place conditional in case this is for macOs
    - name: Check for srcclr.yml
      id: check-config-file
      run: |
          if [ -f ./srcclr.yml ]; then
            echo "Configuration file found."
          else
            echo "Configuration file not found."
          fi

    - name: Parse YAML into environment variables
      id: parse-yaml
      run: |
        # Parse YAML using yq and convert keys to uppercase with CONFIG_ prefix
        if [ -f ./srcclr.yml ]; then
          while IFS=":" read -r key value; do
            upper_key=$(echo "$key" | tr '[:lower:]' '[:upper:]')                
            echo "SRCCLR_$upper_key=$value" 
            echo "SRCCLR_$upper_key=$value" >> $GITHUB_ENV
          done < <(yq eval 'to_entries | .[] | "\(.key): \(.value)"' srcclr.yml)
        fi
      env:
        YQ_VERSION: "v4.25.2"
# >> $GITHUB_ENV

    - name: Output SRCCLR.yml variables
      run: |
        echo "Parsed variables:"
        env | grep ^SRCCLR_


    - name: Package the application
      id: application_package
      shell: bash
      env:
        VERACODE_API_KEY_ID: '${{ secrets.VERACODE_API_ID }}'
        VERACODE_API_KEY_SECRET: '${{ secrets.VERACODE_API_KEY }}'
      run: |
        if [[ ! -z "${{ inputs.build_predependency_command }}" ]]; then
          echo "Executing Pre-Build Dependency.."
          ${{ inputs.build_predependency_command }}
        else
          echo "No Pre-Build Dependency provided."
        fi
        if [[ "${{ inputs.event_name }}" == *"ruby"* ]]; then
          source /etc/profile.d/rvm.sh
          rvm pkg install openssl
          rvm install ruby-${{ inputs.ruby_version }}
        fi
        working_path=`pwd`
        echo "working_dir=$working_path" >> "$GITHUB_OUTPUT"
        cd veracode-helper/helper/cli
        cliFile=$(ls -1 . | head -n 1)
        cliFileName=$(echo "$cliFile" | cut -c 1-$((${#cliFile}-7)))
        tar -zxvf $cliFile
        cd $cliFileName
        export PATH="veracode-helper/helper/cli/$cliFileName:$PATH"
        cd $working_path
        if [[ "${{ inputs.event_name }}" == *"ruby"* ]]; then
          gem install bundler -v ${{ inputs.bundle_version }}
          gem install veracode
          bundle install
        fi
        veracode package --source . --output veracode-artifacts --trust

    - name: Package error
      if: failure() && steps.application_package.outcome == 'failure'
      run: |
        echo "::error::Veracode static scan faced a problem. Please contact your Veracode administrator for more information."

    - uses: actions/upload-artifact@v4
      with:
        name: veracode-artifact
        path: "${{ steps.application_package.outputs.working_dir }}/veracode-artifacts/*"
        if-no-files-found: error
